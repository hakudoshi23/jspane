{"version":3,"sources":["jspane.js"],"names":["wrapByGroupIfNeeded","self","pane","axis","group","parentNode","isGroup","className","indexOf","hasRightAxis","dataset","createGroup","replaceElement","append","setDimensions","getDimensions","unwrapFromGroupIfNeeded","hasSingleChildren","children","length","document","createElement","createAnchor","onAnchorMouseDown","anchor","addEventListener","delta","JSON","stringify","getAnchorDelta","event","center","getElementCenter","pageX","pageY","updateAnchorFeedback","treshhold","feedbackColor","getAnchorFeedbackColor","style","backgroundColor","getAnchorAction","updateSeparatorPanes","separator","axisIndex","axisToIndex","parseFloat","deltaPercentage","getClientProperty","pane1","previousSibling","pane2","nextSibling","pane1Dimensions","pane2Dimensions","runCallback","callback","element","b","getBoundingClientRect","left","width","top","height","axisWithCapital","charAt","toUpperCase","slice","propertyName","current","toReplace","parent","insertBefore","removeChild","extend","properties","defaults","p","hasOwnProperty","value","defaultOptions","container","size","events","onPaneCreate","onPaneResized","onPaneDestroy","Pane","options","createPane","createSeparator","onSeparatorMouseDown","arrow","cursor","target","positionArray","position","initial","this","fn","prototype","containerId","querySelector","rootPane","clientX","clientY","parse","split","merge","newPane","currentPaneDimensions","newPaneDimensions","updateGroupDimensions","toRemove","paneDimensions","toRemoveDimensions","dimensions","dimensionsAsString","getGroup","panes","getPanes","sepSize","getSeparatorsSize","subSize","updateDimensions","isGroupNode","i","querySelectorAll","getSeparators","total","separators","setGroupDimensions","arrayOfDimensions","dim","getGroupDimensions","output","push","window"],"mappings":"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","file":"jspane.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n        container: '#jspane',\r\n        anchor: {\r\n            treshhold: 10\r\n        },\r\n        separator: {\r\n            size: 5\r\n        },\r\n        events: {\r\n            onPaneCreate: null,\r\n            onPaneResized: null,\r\n            onPaneDestroy: null,\r\n        }\r\n    };\r\n\r\n    var Pane = function (options) {\r\n        this.fn = Pane.prototype;\r\n        var self = this;\r\n\r\n        this.options = extend(defaultOptions, options);\r\n\r\n        var containerId = this.options.container;\r\n        this.container = document.querySelector(containerId);\r\n\r\n        this.current = {\r\n            separator: null,\r\n            anchor: null\r\n        };\r\n\r\n        var rootPane = createPane();\r\n        this.container.append(rootPane);\r\n\r\n        document.addEventListener('mousemove', function (event) {\r\n            var delta = 0;\r\n            if (self.current.anchor) {\r\n                var anchor = self.current.anchor;\r\n                delta = getAnchorDelta(anchor, event);\r\n\r\n                anchor.dataset.delta = JSON.stringify(delta);\r\n                updateAnchorFeedback(anchor, delta, self.options.anchor.treshhold);\r\n            }\r\n            if (self.current.separator) {\r\n                var separator = self.current.separator;\r\n                var group = separator.parentNode;\r\n                var axis = group.dataset.axis;\r\n\r\n                var current = [event.clientX, event.clientY];\r\n                var initial = JSON.parse(separator.dataset.initial);\r\n                delta = current[axisToIndex(axis)] - initial;\r\n                separator.dataset.delta = delta;\r\n\r\n                updateSeparatorPanes(self, separator, axis, delta);\r\n                separator.dataset.initial = JSON.stringify(initial + delta);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('mouseup', function (event) {\r\n            if (self.current.separator) self.current.separator = null;\r\n            if (self.current.anchor) {\r\n                var anchor = self.current.anchor;\r\n                var delta = JSON.parse(anchor.dataset.delta);\r\n\r\n                var pane = anchor.parentNode;\r\n                switch (getAnchorAction(delta, self.options.anchor.treshhold)) {\r\n                    case 'left': self.split(pane, 'width'); break;\r\n                    case 'right': self.merge(pane, 'width'); break;\r\n                    case 'up': self.split(pane, 'height'); break;\r\n                    case 'down': self.merge(pane, 'height'); break;\r\n                }\r\n\r\n                self.current.anchor = null;\r\n            }\r\n        });\r\n\r\n        this.split = function (pane, axis) {\r\n            var group = wrapByGroupIfNeeded(self, pane, axis);\r\n            var newPane = createPane();\r\n            var separator = createSeparator(self.options.separator.size, axis);\r\n\r\n            var axisIndex = axisToIndex(axis);\r\n            var currentPaneDimensions = self.getDimensions(pane);\r\n            var newPaneDimensions = self.getDimensions(newPane);\r\n            newPaneDimensions[axisIndex] = currentPaneDimensions[axisIndex] / 2.0;\r\n            currentPaneDimensions[axisIndex] = currentPaneDimensions[axisIndex] / 2.0;\r\n\r\n            group.insertBefore(newPane, pane.nextSibling);\r\n            group.insertBefore(separator, pane.nextSibling);\r\n\r\n            self.setDimensions(pane, currentPaneDimensions);\r\n            self.setDimensions(newPane, newPaneDimensions);\r\n            self.updateGroupDimensions(group);\r\n\r\n            runCallback(self.options.events.onPaneCreate, newPane);\r\n        };\r\n\r\n        this.merge = function (pane, axis) {\r\n            if (pane.nextSibling) {\r\n                var group = pane.parentNode;\r\n                if (group.dataset.axis === axis) {\r\n                    var toRemove = pane.nextSibling.nextSibling;\r\n                    runCallback(self.options.events.onPaneDestroy, toRemove);\r\n\r\n                    var paneDimensions = self.getDimensions(pane);\r\n                    var toRemoveDimensions = self.getDimensions(toRemove);\r\n\r\n                    group.removeChild(pane.nextSibling);\r\n                    group.removeChild(pane.nextSibling);\r\n\r\n                    var axisIndex = axisToIndex(axis);\r\n                    paneDimensions[axisIndex] += toRemoveDimensions[axisIndex];\r\n                    self.setDimensions(pane, paneDimensions);\r\n\r\n                    unwrapFromGroupIfNeeded(self, pane, axis);\r\n                    self.updateGroupDimensions(pane.parentNode);\r\n                }\r\n            }\r\n        };\r\n\r\n        function createPane () {\r\n            var pane = document.createElement('div');\r\n            pane.className = 'pane';\r\n            self.setDimensions(pane, [100, 100]);\r\n            pane.append(createAnchor(onAnchorMouseDown));\r\n            runCallback(self.options.events.onPaneCreate);\r\n            return pane;\r\n        }\r\n\r\n        function createSeparator (size, axis) {\r\n            var separator = document.createElement('div');\r\n            separator.addEventListener('mousedown', onSeparatorMouseDown);\r\n            var arrow = axisToIndex(axis) ? 'ns' : 'ew';\r\n            separator.style.cursor = arrow + '-resize';\r\n            separator.className = 'pane-separator';\r\n            separator.style[axis] = size + 'px';\r\n            return separator;\r\n        }\r\n\r\n        function onAnchorMouseDown (event) {\r\n            self.current.anchor = event.target;\r\n        }\r\n\r\n        function onSeparatorMouseDown (event) {\r\n            var separator = event.target;\r\n            self.current.separator = separator;\r\n            var group = separator.parentNode;\r\n            var axis = group.dataset.axis;\r\n            var positionArray = [event.pageX, event.pageY];\r\n            var position = positionArray[axisToIndex(axis)];\r\n            separator.dataset.initial = JSON.stringify(position);\r\n        }\r\n    };\r\n\r\n    Pane.prototype.setDimensions = function (pane, dimensions) {\r\n        var dimensionsAsString = JSON.stringify(dimensions);\r\n        pane.dataset.dimensions = dimensionsAsString;\r\n\r\n        var group = this.getGroup(pane);\r\n        if (group === null) {\r\n            pane.style.width = 'calc(100% - 0px)';\r\n            pane.style.height = 'calc(100% - 0px)';\r\n        } else {\r\n            var panes = this.getPanes(group);\r\n            var sepSize = this.getSeparatorsSize(group);\r\n            var axis = group.dataset.axis;\r\n\r\n            var subSize = [0, 0];\r\n            if (panes.length > 0)\r\n                subSize[axisToIndex(axis)] = (sepSize / panes.length);\r\n            pane.style.width = 'calc(' + dimensions[0] + '% - ' + subSize[0] + 'px)';\r\n            pane.style.height = 'calc(' + dimensions[1] + '% - ' + subSize[1] + 'px)';\r\n        }\r\n    };\r\n\r\n    Pane.prototype.updateDimensions = function (pane) {\r\n        this.setDimensions(pane, this.getDimensions(pane));\r\n    };\r\n\r\n    Pane.prototype.getDimensions = function (pane) {\r\n        return JSON.parse(pane.dataset.dimensions);\r\n    };\r\n\r\n    Pane.prototype.getGroup = function (pane) {\r\n        var parent = pane.parentNode;\r\n        if (parent) {\r\n            var isGroupNode = parent.className.indexOf('pane-group') != -1;\r\n            if (isGroupNode) return parent;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    Pane.prototype.updateGroupDimensions = function (group) {\r\n        var panes = this.getPanes(group);\r\n        for (var i = 0; i < panes.length; i++)\r\n            this.updateDimensions(panes[i]);\r\n    };\r\n\r\n    Pane.prototype.getPanes = function (group) {\r\n        return group.querySelectorAll(':scope > .pane');\r\n    };\r\n\r\n    Pane.prototype.getSeparators = function (group) {\r\n        return group.querySelectorAll(':scope > .pane-separator');\r\n    };\r\n\r\n    Pane.prototype.getSeparatorsSize = function (group) {\r\n        if (!group) return 0;\r\n        var total = 0;\r\n        var axis = group.dataset.axis;\r\n        var separators = this.getSeparators(group);\r\n        for (var i = 0; i < separators.length; i++)\r\n            total += getClientProperty(separators[i], axis);\r\n        return total;\r\n    };\r\n\r\n    Pane.prototype.setGroupDimensions = function (group, arrayOfDimensions) {\r\n        var axis = group.dataset.axis;\r\n        var panes = this.getPanes(group);\r\n        var axisIndex = axisToIndex(axis);\r\n        for (var i = 0; i < panes.length; i++) {\r\n            var pane = panes[i];\r\n            var dim = this.getDimensions(pane);\r\n            dim[axisIndex] = arrayOfDimensions[i];\r\n            this.setDimensions(pane, dim);\r\n        }\r\n    };\r\n\r\n    Pane.prototype.getGroupDimensions = function (group) {\r\n        var output = [];\r\n        var axis = group.dataset.axis;\r\n        var panes = this.getPanes(group);\r\n        var axisIndex = axisToIndex(axis);\r\n        for (var i = 0; i < panes.length; i++) {\r\n            var pane = panes[i];\r\n            var dim = this.getDimensions(pane);\r\n            output.push(dim[axisIndex]);\r\n        }\r\n        return output;\r\n    };\r\n\r\n    window.Pane = Pane;\r\n\r\n    function wrapByGroupIfNeeded (self, pane, axis) {\r\n        var group = pane.parentNode;\r\n        var isGroup = group.className.indexOf('pane-group') != -1;\r\n        var hasRightAxis = group.dataset.axis === axis;\r\n        if (!isGroup || !hasRightAxis) {\r\n            group = createGroup(axis);\r\n            replaceElement(pane, group);\r\n            group.append(pane);\r\n            self.setDimensions(group, self.getDimensions(pane));\r\n            self.setDimensions(pane, [100, 100]);\r\n        }\r\n        return group;\r\n    }\r\n\r\n    function unwrapFromGroupIfNeeded (self, pane, axis) {\r\n        var group = pane.parentNode;\r\n        var isGroup = group.className.indexOf('pane-group') != -1;\r\n        var hasSingleChildren = group.children.length === 1;\r\n        if (isGroup && hasSingleChildren) {\r\n            self.setDimensions(pane, self.getDimensions(group));\r\n            replaceElement(group, pane);\r\n        }\r\n    }\r\n\r\n    function createGroup (axis) {\r\n        var group = document.createElement('div');\r\n        group.className = 'pane pane-group';\r\n        group.dataset.axis = axis;\r\n        return group;\r\n    }\r\n\r\n    function createAnchor (onAnchorMouseDown) {\r\n        var anchor = document.createElement('div');\r\n        anchor.className = 'pane-anchor';\r\n        anchor.addEventListener('mousedown', onAnchorMouseDown);\r\n        anchor.dataset.delta = JSON.stringify([0, 0]);\r\n        return anchor;\r\n    }\r\n\r\n    function getAnchorDelta (anchor, event) {\r\n        var center = getElementCenter(anchor);\r\n        return [center[0] - event.pageX, center[1] - event.pageY];\r\n    }\r\n\r\n    function updateAnchorFeedback (anchor, delta, treshhold) {\r\n        var feedbackColor = getAnchorFeedbackColor(delta, treshhold);\r\n        anchor.style.backgroundColor = feedbackColor;\r\n    }\r\n\r\n    function getAnchorFeedbackColor (delta, treshhold) {\r\n        switch (getAnchorAction(delta, treshhold)) {\r\n            case 'left': return '#000000';\r\n            case 'right': return '#FF0000';\r\n            case 'up': return '#00FF00';\r\n            case 'down': return '#0000FF';\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n    function getAnchorAction (delta, treshhold) {\r\n        if (delta[0] > +treshhold) return 'left';\r\n        if (delta[0] < -treshhold) return 'right';\r\n        if (delta[1] > +treshhold) return 'up';\r\n        if (delta[1] < -treshhold) return 'down';\r\n        return '';\r\n    }\r\n\r\n    function updateSeparatorPanes (self, separator, axis) {\r\n        var group = separator.parentNode;\r\n        var axisIndex = axisToIndex(axis);\r\n        var delta = parseFloat(separator.dataset.delta);\r\n        var deltaPercentage = delta *100 / getClientProperty(group, axis);\r\n        var pane1 = separator.previousSibling;\r\n        var pane2 = separator.nextSibling;\r\n        var pane1Dimensions = self.getDimensions(pane1);\r\n        var pane2Dimensions = self.getDimensions(pane2);\r\n        pane1Dimensions[axisIndex] += deltaPercentage;\r\n        pane2Dimensions[axisIndex] -= deltaPercentage;\r\n        self.setDimensions(pane1, pane1Dimensions);\r\n        self.setDimensions(pane2, pane2Dimensions);\r\n    }\r\n\r\n    function runCallback (callback) {\r\n        if (callback) callback();\r\n    }\r\n\r\n    function getElementCenter (element) {\r\n        var b = element.getBoundingClientRect();\r\n        return [b.left + (b.width / 2), b.top + (b.height / 2)];\r\n    }\r\n\r\n    function getClientProperty (element, axis) {\r\n        var axisWithCapital = axis.charAt(0).toUpperCase() + axis.slice(1);\r\n        var propertyName = 'client' + axisWithCapital;\r\n        return element[propertyName];\r\n    }\r\n\r\n    function replaceElement (current, toReplace) {\r\n        var parent = current.parentNode;\r\n        parent.insertBefore(toReplace, current);\r\n        parent.removeChild(current);\r\n    }\r\n\r\n    function axisToIndex (axis) {\r\n        if (axis === 'width') return 0;\r\n        else if (axis === 'height') return 1;\r\n    }\r\n\r\n    function extend (properties, defaults) {\r\n        properties = properties || {};\r\n        for (var p in defaults)\r\n          if (defaults.hasOwnProperty(p) && !properties[p]) {\r\n              var value = defaults[p];\r\n              if (typeof value === 'object')\r\n                  extend(properties[p], defaults[p]);\r\n              else\r\n                  properties[p] = defaults[p];\r\n          }\r\n        return properties;\r\n    }\r\n})();\r\n"]}