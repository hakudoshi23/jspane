{"version":3,"sources":["jspane.js"],"names":["wrapByGroupIfNeeded","self","pane","axis","group","parentNode","isGroup","className","indexOf","hasRightAxis","dataset","createGroup","replaceElement","append","setDimensions","getDimensions","unwrapFromGroupIfNeeded","hasSingleChildren","children","length","document","createElement","createAnchor","onAnchorMouseDown","anchor","addEventListener","delta","JSON","stringify","getAnchorDelta","event","center","getElementCenter","pageX","pageY","updateAnchorFeedback","treshhold","action","getAnchorAction","replace","a","b","console","debug","updateSeparatorPanes","separator","axisIndex","axisToIndex","parseFloat","deltaPercentage","getClientProperty","pane1","previousSibling","pane2","nextSibling","pane1Dimensions","pane2Dimensions","runCallback","callbackName","callback","options","callbacks","args","Array","prototype","slice","call","arguments","apply","element","getBoundingClientRect","left","width","top","height","axisWithCapital","charAt","toUpperCase","propertyName","current","toReplace","parent","insertBefore","removeChild","extend","defaults","properties","property","hasOwnProperty","value","defaultOptions","container","size","onPaneCreate","onPaneSplit","onPaneResize","onPaneMerge","onPaneDestroy","Pane","createPane","createSeparator","onSeparatorMouseDown","arrow","style","cursor","target","positionArray","position","initial","this","fn","containerId","querySelector","rootPane","clientX","clientY","parse","split","merge","actionRemoved","newPane","currentPaneDimensions","newPaneDimensions","updateGroupDimensions","toRemove","paneDimensions","toRemoveDimensions","dimensions","dimensionsAsString","getGroup","panes","getPanes","sepSize","getSeparatorsSize","subSize","newWidth","newHeight","isChanged","updateDimensions","isGroupNode","i","querySelectorAll","getSeparators","total","separators","setGroupDimensions","arrayOfDimensions","dim","getGroupDimensions","output","push","window"],"mappings":"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","file":"jspane.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n        container: '#jspane',\r\n        anchor: {\r\n            treshhold: 20\r\n        },\r\n        separator: {\r\n            size: 5\r\n        },\r\n        callbacks: {\r\n            onPaneCreate: null,\r\n            onPaneSplit: null,\r\n            onPaneResize: null,\r\n            onPaneMerge: null,\r\n            onPaneDestroy: null,\r\n        }\r\n    };\r\n\r\n    var Pane = function (options) {\r\n        this.fn = Pane.prototype;\r\n        var self = this;\r\n\r\n        this.options = defaultOptions;\r\n        extend(defaultOptions, options);\r\n\r\n        var containerId = this.options.container;\r\n        this.container = document.querySelector(containerId);\r\n\r\n        this.current = {\r\n            separator: null,\r\n            anchor: null\r\n        };\r\n\r\n        var rootPane = createPane();\r\n        this.container.append(rootPane);\r\n\r\n        document.addEventListener('mousemove', function (event) {\r\n            var delta = 0;\r\n            if (self.current.anchor) {\r\n                var anchor = self.current.anchor;\r\n                delta = getAnchorDelta(anchor, event);\r\n\r\n                anchor.dataset.delta = JSON.stringify(delta);\r\n                updateAnchorFeedback(anchor, delta, self.options.anchor.treshhold);\r\n            }\r\n            if (self.current.separator) {\r\n                var separator = self.current.separator;\r\n                var group = separator.parentNode;\r\n                var axis = group.dataset.axis;\r\n\r\n                var current = [event.clientX, event.clientY];\r\n                var initial = JSON.parse(separator.dataset.initial);\r\n                delta = current[axisToIndex(axis)] - initial;\r\n                separator.dataset.delta = delta;\r\n\r\n                updateSeparatorPanes(self, separator, axis, delta);\r\n                separator.dataset.initial = JSON.stringify(initial + delta);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('mouseup', function (event) {\r\n            if (self.current.separator) self.current.separator = null;\r\n            if (self.current.anchor) {\r\n                var anchor = self.current.anchor;\r\n                var delta = JSON.parse(anchor.dataset.delta);\r\n\r\n                var pane = anchor.parentNode;\r\n                switch (getAnchorAction(delta, self.options.anchor.treshhold)) {\r\n                    case 'left': self.split(pane, 'width'); break;\r\n                    case 'right': self.merge(pane, 'width'); break;\r\n                    case 'up': self.split(pane, 'height'); break;\r\n                    case 'down': self.merge(pane, 'height'); break;\r\n                }\r\n                var actionRemoved = anchor.className.replace(/\\s+action-\\w*/, '');\r\n                anchor.dataset.delta = JSON.stringify([0, 0]);\r\n                anchor.className = actionRemoved;\r\n\r\n                self.current.anchor = null;\r\n            }\r\n        });\r\n\r\n        this.split = function (pane, axis) {\r\n            var group = wrapByGroupIfNeeded(self, pane, axis);\r\n            var newPane = createPane();\r\n            var separator = createSeparator(self.options.separator.size, axis);\r\n\r\n            var axisIndex = axisToIndex(axis);\r\n            var currentPaneDimensions = self.getDimensions(pane);\r\n            var newPaneDimensions = self.getDimensions(newPane);\r\n            newPaneDimensions[axisIndex] = currentPaneDimensions[axisIndex] / 2.0;\r\n            currentPaneDimensions[axisIndex] = currentPaneDimensions[axisIndex] / 2.0;\r\n\r\n            group.insertBefore(newPane, pane.nextSibling);\r\n            group.insertBefore(separator, pane.nextSibling);\r\n\r\n            self.setDimensions(pane, currentPaneDimensions);\r\n            self.setDimensions(newPane, newPaneDimensions);\r\n            self.updateGroupDimensions(group);\r\n            runCallback(self, 'onPaneSplit', pane, newPane);\r\n        };\r\n\r\n        this.merge = function (pane, axis) {\r\n            if (pane.nextSibling) {\r\n                var group = pane.parentNode;\r\n                if (group.dataset.axis === axis) {\r\n                    var toRemove = pane.nextSibling.nextSibling;\r\n                    runCallback(self, 'onPaneMerge', pane, toRemove);\r\n                    runCallback(self, 'onPaneDestroy', toRemove);\r\n\r\n                    var paneDimensions = self.getDimensions(pane);\r\n                    var toRemoveDimensions = self.getDimensions(toRemove);\r\n\r\n                    group.removeChild(pane.nextSibling);\r\n                    group.removeChild(pane.nextSibling);\r\n\r\n                    var axisIndex = axisToIndex(axis);\r\n                    paneDimensions[axisIndex] += toRemoveDimensions[axisIndex];\r\n                    self.setDimensions(pane, paneDimensions);\r\n\r\n                    unwrapFromGroupIfNeeded(self, pane, axis);\r\n                    self.updateGroupDimensions(pane.parentNode);\r\n                }\r\n            }\r\n        };\r\n\r\n        function createPane () {\r\n            var pane = document.createElement('div');\r\n            pane.className = 'pane';\r\n            pane.append(createAnchor(onAnchorMouseDown));\r\n            runCallback(self, 'onPaneCreate', pane);\r\n            self.setDimensions(pane, [100, 100]);\r\n            return pane;\r\n        }\r\n\r\n        function createSeparator (size, axis) {\r\n            var separator = document.createElement('div');\r\n            separator.addEventListener('mousedown', onSeparatorMouseDown);\r\n            var arrow = axisToIndex(axis) ? 'ns' : 'ew';\r\n            separator.style.cursor = arrow + '-resize';\r\n            separator.className = 'pane-separator';\r\n            separator.style[axis] = size + 'px';\r\n            return separator;\r\n        }\r\n\r\n        function onAnchorMouseDown (event) {\r\n            self.current.anchor = event.target;\r\n        }\r\n\r\n        function onSeparatorMouseDown (event) {\r\n            var separator = event.target;\r\n            self.current.separator = separator;\r\n            var group = separator.parentNode;\r\n            var axis = group.dataset.axis;\r\n            var positionArray = [event.pageX, event.pageY];\r\n            var position = positionArray[axisToIndex(axis)];\r\n            separator.dataset.initial = JSON.stringify(position);\r\n        }\r\n    };\r\n\r\n    Pane.prototype.setDimensions = function (pane, dimensions) {\r\n        var dimensionsAsString = JSON.stringify(dimensions);\r\n        pane.dataset.dimensions = dimensionsAsString;\r\n\r\n        var group = this.getGroup(pane);\r\n        if (group === null) {\r\n            pane.style.width = 'calc(100% - 0px)';\r\n            pane.style.height = 'calc(100% - 0px)';\r\n            runCallback(this, 'onPaneResize', pane);\r\n        } else {\r\n            var panes = this.getPanes(group);\r\n            var sepSize = this.getSeparatorsSize(group);\r\n            var axis = group.dataset.axis;\r\n\r\n            var subSize = [0, 0];\r\n            if (panes.length > 0)\r\n                subSize[axisToIndex(axis)] = (sepSize / panes.length);\r\n            var newWidth = 'calc(' + dimensions[0] + '% - ' + subSize[0] + 'px)';\r\n            var newHeight = 'calc(' + dimensions[1] + '% - ' + subSize[1] + 'px)';\r\n            var isChanged = (pane.style.width != newWidth) ||\r\n                (pane.style.height != newHeight);\r\n            pane.style.width = newWidth;\r\n            pane.style.height = newHeight;\r\n            if (isChanged) runCallback(this, 'onPaneResize', pane);\r\n        }\r\n    };\r\n\r\n    Pane.prototype.updateDimensions = function (pane) {\r\n        this.setDimensions(pane, this.getDimensions(pane));\r\n    };\r\n\r\n    Pane.prototype.getDimensions = function (pane) {\r\n        return JSON.parse(pane.dataset.dimensions);\r\n    };\r\n\r\n    Pane.prototype.getGroup = function (pane) {\r\n        var parent = pane.parentNode;\r\n        if (parent) {\r\n            var isGroupNode = parent.className.indexOf('pane-group') != -1;\r\n            if (isGroupNode) return parent;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    Pane.prototype.updateGroupDimensions = function (group) {\r\n        var panes = this.getPanes(group);\r\n        for (var i = 0; i < panes.length; i++)\r\n            this.updateDimensions(panes[i]);\r\n    };\r\n\r\n    Pane.prototype.getPanes = function (group) {\r\n        return group.querySelectorAll(':scope > .pane');\r\n    };\r\n\r\n    Pane.prototype.getSeparators = function (group) {\r\n        return group.querySelectorAll(':scope > .pane-separator');\r\n    };\r\n\r\n    Pane.prototype.getSeparatorsSize = function (group) {\r\n        if (!group) return 0;\r\n        var total = 0;\r\n        var axis = group.dataset.axis;\r\n        var separators = this.getSeparators(group);\r\n        for (var i = 0; i < separators.length; i++)\r\n            total += getClientProperty(separators[i], axis);\r\n        return total;\r\n    };\r\n\r\n    Pane.prototype.setGroupDimensions = function (group, arrayOfDimensions) {\r\n        var axis = group.dataset.axis;\r\n        var panes = this.getPanes(group);\r\n        var axisIndex = axisToIndex(axis);\r\n        for (var i = 0; i < panes.length; i++) {\r\n            var pane = panes[i];\r\n            var dim = this.getDimensions(pane);\r\n            dim[axisIndex] = arrayOfDimensions[i];\r\n            this.setDimensions(pane, dim);\r\n        }\r\n    };\r\n\r\n    Pane.prototype.getGroupDimensions = function (group) {\r\n        var output = [];\r\n        var axis = group.dataset.axis;\r\n        var panes = this.getPanes(group);\r\n        var axisIndex = axisToIndex(axis);\r\n        for (var i = 0; i < panes.length; i++) {\r\n            var pane = panes[i];\r\n            var dim = this.getDimensions(pane);\r\n            output.push(dim[axisIndex]);\r\n        }\r\n        return output;\r\n    };\r\n\r\n    window.Pane = Pane;\r\n\r\n    function wrapByGroupIfNeeded (self, pane, axis) {\r\n        var group = pane.parentNode;\r\n        var isGroup = group.className.indexOf('pane-group') != -1;\r\n        var hasRightAxis = group.dataset.axis === axis;\r\n        if (!isGroup || !hasRightAxis) {\r\n            group = createGroup(axis);\r\n            replaceElement(pane, group);\r\n            group.append(pane);\r\n            self.setDimensions(group, self.getDimensions(pane));\r\n            self.setDimensions(pane, [100, 100]);\r\n        }\r\n        return group;\r\n    }\r\n\r\n    function unwrapFromGroupIfNeeded (self, pane, axis) {\r\n        var group = pane.parentNode;\r\n        var isGroup = group.className.indexOf('pane-group') != -1;\r\n        var hasSingleChildren = group.children.length === 1;\r\n        if (isGroup && hasSingleChildren) {\r\n            self.setDimensions(pane, self.getDimensions(group));\r\n            replaceElement(group, pane);\r\n        }\r\n    }\r\n\r\n    function createGroup (axis) {\r\n        var group = document.createElement('div');\r\n        group.className = 'pane pane-group';\r\n        group.dataset.axis = axis;\r\n        return group;\r\n    }\r\n\r\n    function createAnchor (onAnchorMouseDown) {\r\n        var anchor = document.createElement('div');\r\n        anchor.className = 'pane-anchor';\r\n        anchor.addEventListener('mousedown', onAnchorMouseDown);\r\n        anchor.dataset.delta = JSON.stringify([0, 0]);\r\n        return anchor;\r\n    }\r\n\r\n    function getAnchorDelta (anchor, event) {\r\n        var center = getElementCenter(anchor);\r\n        return [center[0] - event.pageX, center[1] - event.pageY];\r\n    }\r\n\r\n    function updateAnchorFeedback (anchor, delta, treshhold) {\r\n        var action = getAnchorAction(delta, treshhold);\r\n        anchor.className = anchor.className.replace(/\\s+action-\\w*/, '');\r\n        if (action) anchor.className += ' action-' + action;\r\n    }\r\n\r\n    function getAnchorAction (delta, treshhold) {\r\n        if (delta[0] > treshhold || delta[1] > treshhold ||\r\n            delta[0] < -treshhold || delta[1] < -treshhold) {\r\n            var a = delta[0] >= delta[1];\r\n            var b = delta[0] >= -delta[1];\r\n            console.debug(a, b);\r\n            if (a && b) return 'left';\r\n            if (!a && !b) return 'right';\r\n            if (!a && b) return 'up';\r\n            if (a && !b) return 'down';\r\n        } else return '';\r\n    }\r\n\r\n    function updateSeparatorPanes (self, separator, axis) {\r\n        var group = separator.parentNode;\r\n        var axisIndex = axisToIndex(axis);\r\n        var delta = parseFloat(separator.dataset.delta);\r\n        var deltaPercentage = delta *100 / getClientProperty(group, axis);\r\n        var pane1 = separator.previousSibling;\r\n        var pane2 = separator.nextSibling;\r\n        var pane1Dimensions = self.getDimensions(pane1);\r\n        var pane2Dimensions = self.getDimensions(pane2);\r\n        pane1Dimensions[axisIndex] += deltaPercentage;\r\n        pane2Dimensions[axisIndex] -= deltaPercentage;\r\n        self.setDimensions(pane1, pane1Dimensions);\r\n        self.setDimensions(pane2, pane2Dimensions);\r\n    }\r\n\r\n    function runCallback (self, callbackName) {\n        var callback = self.options.callbacks[callbackName];\r\n        if (callback) {\r\n            var args = Array.prototype.slice.call(arguments, 2);\r\n            callback.apply(null, args);\r\n        }\r\n    }\r\n\r\n    function getElementCenter (element) {\r\n        var b = element.getBoundingClientRect();\r\n        return [b.left + (b.width / 2), b.top + (b.height / 2)];\r\n    }\r\n\r\n    function getClientProperty (element, axis) {\r\n        var axisWithCapital = axis.charAt(0).toUpperCase() + axis.slice(1);\r\n        var propertyName = 'client' + axisWithCapital;\r\n        return element[propertyName];\r\n    }\r\n\r\n    function replaceElement (current, toReplace) {\r\n        var parent = current.parentNode;\r\n        parent.insertBefore(toReplace, current);\r\n        parent.removeChild(current);\r\n    }\r\n\r\n    function axisToIndex (axis) {\r\n        if (axis === 'width') return 0;\r\n        else if (axis === 'height') return 1;\r\n    }\r\n\r\n    function extend (defaults, properties) {\r\n        for (var property in properties)\r\n            if (property && properties.hasOwnProperty(property)) {\r\n                var value = properties[property];\r\n                if (typeof value === 'object')\r\n                    extend(defaults[property], properties[property]);\r\n                else\r\n                    defaults[property] = properties[property];\r\n            }\r\n    }\r\n})();\r\n"]}